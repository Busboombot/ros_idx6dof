#!/usr/bin/env python
from __future__ import print_function
import rospy
from motion_control.msg import MotionCommand, MotorCommand, Segment, SegmentResponse
from trajectory import (Command, freq_map, TimeoutException, SegmentList, SegmentIterator, SegmentError, VrOutOfRangeError ) 
from time import sleep
from Queue import Queue, Empty
from threading import Thread
import vrep
import math
import time


def add_segment_from_message(memo, msg):
    
    #print(msg.exec_type)
    # Drop IMMEDIATE messages when the queue is full
    if (msg.exec_type == MotionCommand.IMMEDIATE and len(memo['sl'])  > 1):
        # But don't drop stop messages
        if sum (abs(e) for e in msg.joints) != 0:
           # print("Stopping")
            return 
    
    if msg.command_type == MotionCommand.V_COMMAND:
        
        if msg.t > 0:
            try:
                memo['sl'].add_velocity_segment(msg.joints,t=msg.t)
            except SegmentError as e:
                print("ERROR", e)
            except VrOutOfRangeError as e:
                print("ERROR", e)
        else:
            print("No t for v")
            pass
        
    else:
        if msg.t > 0:
            try:
                memo['sl'].add_distance_segment(msg.joints,t=msg.t)
                print("Added Distance Segments")
            except SegmentError as e:
                print("ERROR", e)
            except VrOutOfRangeError as e:
                print("ERROR", e)
        else: 
            print("Not an X")
            #pass
            
def send_command_thread(msg,memo):
    
   # print("C")
    #queue = memo['queue']
    seq = 0

    si  = SegmentIterator(memo['sl'])
    

    no_data = False
    queue_empty = False
    add_segment_from_message(memo, msg)
    print("Back to send_command_thread function")
    print(len(memo['sl']))
    print(memo['sl'].segments[0].x)
        # Try to leave a message in the segment list, so that the next one that comes in 
        # can be linked to it without taking velocity to 0. 
        # Also, allow the queue to exhaust if the final velocity is zero. 
    if len(memo['sl']) > 1 or (len(memo['sl']) == 1 and memo['sl'].segments[0].x == 0): 
          print("Entering first  'if' statement in send_command_thread")
          try:
       	     s = next(si)
             segment_time = int(s.t_seg*1000000)
                
             if segment_time > 0:  
                 print("segment_time is > 0")                 
                 mcmsg = MotorCommand(
                         seq = seq, 
                         segment_time=int(s.t_seg*1000000), 
                         v0=[ int(sj.v0) for sj in s.joints ],
                         v1=[ int(sj.v1) for sj in s.joints ], 
                         steps= [ int(sj.x) for sj in s.joints ])
    
                 msg.header.stamp = rospy.Time.now()
                 print("Publishing Message")
                 memo['mcpub'].publish(mcmsg)
                 print("Published Message")

             seq += 1
            
          except StopIteration:
               pass

    elif no_data and queue_empty:
         print ("HERE")


     # memo['queue'].put(msg)    



    
    
   
    
def listener():

    rospy.init_node('motor_cmds')
    
    mcpub = rospy.Publisher('motion_control/motor_command', MotorCommand, queue_size=5)
    
    memo = {
        'sl': SegmentList(6, 10000, 100000, None),
        'mcpub': mcpub,
        'seq': 0,
        'queue_time': 0
        
    }
    rospy.Subscriber("motion_control/segment_command", MotionCommand, send_command_thread,memo)

  


    rospy.spin()

if __name__ == '__main__':
    listener()
			
			
