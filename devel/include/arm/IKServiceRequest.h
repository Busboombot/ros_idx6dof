// Generated by gencpp from file arm/IKServiceRequest.msg
// DO NOT EDIT!


#ifndef ARM_MESSAGE_IKSERVICEREQUEST_H
#define ARM_MESSAGE_IKSERVICEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace arm
{
template <class ContainerAllocator>
struct IKServiceRequest_
{
  typedef IKServiceRequest_<ContainerAllocator> Type;

  IKServiceRequest_()
    : target()
    , currentPos()  {
    }
  IKServiceRequest_(const ContainerAllocator& _alloc)
    : target(_alloc)
    , currentPos(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _target_type;
  _target_type target;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _currentPos_type;
  _currentPos_type currentPos;




  typedef boost::shared_ptr< ::arm::IKServiceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm::IKServiceRequest_<ContainerAllocator> const> ConstPtr;

}; // struct IKServiceRequest_

typedef ::arm::IKServiceRequest_<std::allocator<void> > IKServiceRequest;

typedef boost::shared_ptr< ::arm::IKServiceRequest > IKServiceRequestPtr;
typedef boost::shared_ptr< ::arm::IKServiceRequest const> IKServiceRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arm::IKServiceRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arm::IKServiceRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace arm

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'arm': ['/home/drew/ros_idx6dof/src/arm/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::arm::IKServiceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arm::IKServiceRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arm::IKServiceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arm::IKServiceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arm::IKServiceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arm::IKServiceRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arm::IKServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f1c19c69d42f678c3d71ef5c322635c4";
  }

  static const char* value(const ::arm::IKServiceRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf1c19c69d42f678cULL;
  static const uint64_t static_value2 = 0x3d71ef5c322635c4ULL;
};

template<class ContainerAllocator>
struct DataType< ::arm::IKServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arm/IKServiceRequest";
  }

  static const char* value(const ::arm::IKServiceRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arm::IKServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] target\n\
float32[] currentPos\n\
";
  }

  static const char* value(const ::arm::IKServiceRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arm::IKServiceRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.target);
      stream.next(m.currentPos);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct IKServiceRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arm::IKServiceRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arm::IKServiceRequest_<ContainerAllocator>& v)
  {
    s << indent << "target[]" << std::endl;
    for (size_t i = 0; i < v.target.size(); ++i)
    {
      s << indent << "  target[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.target[i]);
    }
    s << indent << "currentPos[]" << std::endl;
    for (size_t i = 0; i < v.currentPos.size(); ++i)
    {
      s << indent << "  currentPos[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.currentPos[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARM_MESSAGE_IKSERVICEREQUEST_H
