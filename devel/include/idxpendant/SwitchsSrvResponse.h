// Generated by gencpp from file idxpendant/SwitchsSrvResponse.msg
// DO NOT EDIT!


#ifndef IDXPENDANT_MESSAGE_SWITCHSSRVRESPONSE_H
#define IDXPENDANT_MESSAGE_SWITCHSSRVRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <idxpendant/SwitchPos.h>

namespace idxpendant
{
template <class ContainerAllocator>
struct SwitchsSrvResponse_
{
  typedef SwitchsSrvResponse_<ContainerAllocator> Type;

  SwitchsSrvResponse_()
    : switches()  {
    }
  SwitchsSrvResponse_(const ContainerAllocator& _alloc)
    : switches(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::idxpendant::SwitchPos_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::idxpendant::SwitchPos_<ContainerAllocator> >::other >  _switches_type;
  _switches_type switches;




  typedef boost::shared_ptr< ::idxpendant::SwitchsSrvResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::idxpendant::SwitchsSrvResponse_<ContainerAllocator> const> ConstPtr;

}; // struct SwitchsSrvResponse_

typedef ::idxpendant::SwitchsSrvResponse_<std::allocator<void> > SwitchsSrvResponse;

typedef boost::shared_ptr< ::idxpendant::SwitchsSrvResponse > SwitchsSrvResponsePtr;
typedef boost::shared_ptr< ::idxpendant::SwitchsSrvResponse const> SwitchsSrvResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::idxpendant::SwitchsSrvResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::idxpendant::SwitchsSrvResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace idxpendant

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'idxpendant': ['/home/pi/ros_idx6dof/src/idxpendant/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::idxpendant::SwitchsSrvResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::idxpendant::SwitchsSrvResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::idxpendant::SwitchsSrvResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::idxpendant::SwitchsSrvResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::idxpendant::SwitchsSrvResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::idxpendant::SwitchsSrvResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::idxpendant::SwitchsSrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fdfeb5028b697838b970222e35ad759c";
  }

  static const char* value(const ::idxpendant::SwitchsSrvResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfdfeb5028b697838ULL;
  static const uint64_t static_value2 = 0xb970222e35ad759cULL;
};

template<class ContainerAllocator>
struct DataType< ::idxpendant::SwitchsSrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "idxpendant/SwitchsSrvResponse";
  }

  static const char* value(const ::idxpendant::SwitchsSrvResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::idxpendant::SwitchsSrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "idxpendant/SwitchPos[] switches\n\
\n\
================================================================================\n\
MSG: idxpendant/SwitchPos\n\
\n\
time time\n\
uint8 switch_no\n\
int8 switch_pos\n\
string switch_name\n\
";
  }

  static const char* value(const ::idxpendant::SwitchsSrvResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::idxpendant::SwitchsSrvResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.switches);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct SwitchsSrvResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::idxpendant::SwitchsSrvResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::idxpendant::SwitchsSrvResponse_<ContainerAllocator>& v)
  {
    s << indent << "switches[]" << std::endl;
    for (size_t i = 0; i < v.switches.size(); ++i)
    {
      s << indent << "  switches[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::idxpendant::SwitchPos_<ContainerAllocator> >::stream(s, indent + "    ", v.switches[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // IDXPENDANT_MESSAGE_SWITCHSSRVRESPONSE_H
