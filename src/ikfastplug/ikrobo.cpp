/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2016-08-25 14:48:18.894879
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44;
x0=IKcos(j[1]);
x1=IKcos(j[2]);
x2=IKsin(j[1]);
x3=IKsin(j[2]);
x4=IKcos(j[3]);
x5=IKsin(j[3]);
x6=IKcos(j[4]);
x7=IKsin(j[5]);
x8=IKcos(j[5]);
x9=IKsin(j[4]);
x10=IKcos(j[0]);
x11=IKsin(j[0]);
x12=((11.0)*x1);
x13=((1.0)*x10);
x14=(x0*x11);
x15=(x11*x6);
x16=(x0*x1);
x17=(x10*x6);
x18=((-1.0)*x5);
x19=((-1.0)*x4);
x20=(x0*x3);
x21=(x0*x10);
x22=((-1.0)*x9);
x23=(x1*x2);
x24=(x2*x3);
x25=((1.0)*x24);
x26=(x11*x24);
x27=((1.0)*x1*x14);
x28=((((-1.0)*x25))+x16);
x29=((((-1.0)*x23))+(((-1.0)*x20)));
x30=(x10*((x20+x23)));
x31=((((-1.0)*x13*x24))+((x10*x16)));
x32=((((-1.0)*x27))+x26);
x33=(x29*x5);
x34=((((-1.0)*x11*x23))+(((-1.0)*x14*x3)));
x35=(x32*x5);
x36=(x34*x4);
x37=(x33+((x28*x4)));
x38=(x37*x8);
x39=(x37*x6);
x40=(((x19*x30))+((x18*x31)));
x41=((((-1.0)*x36))+(((-1.0)*x35)));
x42=(((x11*x9))+((x6*((((x31*x5))+((x30*x4)))))));
x43=(x41*x9);
x44=(((x6*(((((-1.0)*x36))+(((-1.0)*x35))))))+((x10*x22)));
eerot[0]=(((x7*x9*((((x18*x29))+((x19*x28))))))+((x38*x6)));
eerot[1]=(((x29*x4))+((x5*(((((-1.0)*x16))+x25)))));
eerot[2]=(((x38*x9))+((x39*x7)));
eetrans[0]=((((-11.0)*x20))+(((-1.0)*x12*x2))+(((-12.0)*x2)));
eerot[3]=(((x42*x8))+((x7*((x15+((x40*x9)))))));
IkReal x45=((1.0)*x13);
eerot[4]=(((x31*x4))+((x5*(((((-1.0)*x23*x45))+(((-1.0)*x20*x45)))))));
eerot[5]=(((x42*x7))+((x8*(((((-1.0)*x15))+((x22*x40)))))));
eetrans[1]=((15.375)+(((-11.0)*x10*x24))+(((12.0)*x21))+(((3.0)*x11))+((x12*x21)));
eerot[6]=(((x44*x8))+((x7*(((((-1.0)*x43))+(((-1.0)*x13*x6)))))));
eerot[7]=(((x34*x5))+((x4*(((((-1.0)*x11*x25))+x27)))));
eerot[8]=(((x44*x7))+((x8*((x43+x17)))));
eetrans[2]=((((-11.0)*x26))+(((12.0)*x14))+((x12*x14))+(((-3.0)*x10)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,j7,cj7,sj7,htj7,j7mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5,_ij7[2], _nj7;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j7=numeric_limits<IkReal>::quiet_NaN(); _ij7[0] = -1; _ij7[1] = -1; _nj7 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((-1.0)*r20);
new_r01=r22;
new_r02=((-1.0)*r21);
new_px=((-1.0)*pz);
new_r10=r10;
new_r11=((-1.0)*r12);
new_r12=r11;
new_py=((-15.375)+py);
new_r20=r00;
new_r21=((-1.0)*r02);
new_r22=r01;
new_pz=px;
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x46=((1.0)*px);
IkReal x47=((1.0)*pz);
IkReal x48=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x48))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x47)));
rxp0_2=((((-1.0)*r10*x46))+((py*r00)));
rxp1_0=((((-1.0)*r21*x48))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x47)));
rxp1_2=((((-1.0)*r11*x46))+((py*r01)));
rxp2_0=((((-1.0)*r22*x48))+((pz*r12)));
rxp2_1=((((-1.0)*r02*x47))+((px*r22)));
rxp2_2=((((-1.0)*r12*x46))+((py*r02)));
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
cj3array[0]=((-1.03787878787879)+(((0.00378787878787879)*pp)));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IkReal j1eval[2];
j1eval[0]=((px*px)+(py*py));
j1eval[1]=((IKabs(px))+(IKabs(py)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=((IKabs(sj3))+(((0.0909090909090909)*(IKabs(((-12.0)+(((-11.0)*cj3))))))));
j2eval[1]=((1.1900826446281)+(sj3*sj3)+(cj3*cj3)+(((2.18181818181818)*cj3)));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2]

} else
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
IkReal x49=((-12.0)+(((-11.0)*cj3)));
CheckValue<IkReal> x52 = IKatan2WithCheck(IkReal(((-11.0)*sj3)),IkReal(x49),IKFAST_ATAN2_MAGTHRESH);
if(!x52.valid){
continue;
}
IkReal x50=((1.0)*(x52.value));
if((((((121.0)*(sj3*sj3)))+(x49*x49))) < -0.00001)
continue;
CheckValue<IkReal> x53=IKPowWithIntegerCheck(IKabs(IKsqrt(((((121.0)*(sj3*sj3)))+(x49*x49)))),-1);
if(!x53.valid){
continue;
}
if( ((pz*(x53.value))) < -1-IKFAST_SINCOS_THRESH || ((pz*(x53.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x51=IKasin((pz*(x53.value)));
j2array[0]=(x51+(((-1.0)*x50)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((3.14159265358979)+(((-1.0)*x50))+(((-1.0)*x51)));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal j1eval[3];
IkReal x54=((3.0)*sj2);
IkReal x55=(cj2*pz);
IkReal x56=((11.0)*sj3);
IkReal x57=((((-1.0)*sj2*(pz*pz)))+((pp*sj2)));
j1eval[0]=x57;
j1eval[1]=IKsign(x57);
j1eval[2]=((IKabs((((px*x55))+((px*x56))+((py*x54)))))+(IKabs(((((-1.0)*py*x55))+((px*x54))+(((-1.0)*py*x56))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
IkReal x58=(pz*sj2);
IkReal x59=((11.0)*cj3);
IkReal x60=((3.0)*cj2);
IkReal x61=(((cj2*pp))+(((-1.0)*cj2*(pz*pz))));
j1eval[0]=x61;
j1eval[1]=IKsign(x61);
j1eval[2]=((IKabs(((((-12.0)*px))+(((-1.0)*px*x59))+(((-1.0)*px*x58))+((py*x60)))))+(IKabs(((((12.0)*py))+((px*x60))+((py*x58))+((py*x59))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
IkReal x62=((11.0)*px);
IkReal x63=(sj2*sj3);
IkReal x64=(cj2*cj3);
IkReal x65=((11.0)*py);
IkReal x66=((12.0)*cj2);
IkReal x67=(pp+(((-1.0)*(pz*pz))));
j1eval[0]=x67;
j1eval[1]=((IKabs(((((-1.0)*px*x66))+((x62*x63))+(((3.0)*py))+(((-1.0)*x62*x64)))))+(IKabs((((py*x66))+(((3.0)*px))+((x64*x65))+(((-1.0)*x63*x65))))));
j1eval[2]=IKsign(x67);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x68=((11.0)*sj3);
IkReal x69=(pp+(((-1.0)*(pz*pz))));
j1eval[0]=x69;
j1eval[1]=((IKabs((((px*x68))+(((3.0)*py)))))+(IKabs(((((-1.0)*py*x68))+(((3.0)*px))))));
j1eval[2]=IKsign(x69);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x70=((11.0)*sj3);
CheckValue<IkReal> x71=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x71.valid){
continue;
}
CheckValue<IkReal> x72 = IKatan2WithCheck(IkReal((((px*x70))+(((3.0)*py)))),IkReal(((((-1.0)*py*x70))+(((3.0)*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x72.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x71.value)))+(x72.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[2];
IkReal x73=IKsin(j1);
IkReal x74=IKcos(j1);
evalcond[0]=((-3.0)+((py*x73))+((px*x74)));
evalcond[1]=((((-11.0)*sj3))+((px*x73))+(((-1.0)*py*x74)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x130=((11.0)*sj3);
IkReal x131=(pp+(((-1.0)*(pz*pz))));
j1eval[0]=x131;
j1eval[1]=((IKabs(((((-1.0)*px*x130))+(((3.0)*py)))))+(IKabs((((py*x130))+(((3.0)*px))))));
j1eval[2]=IKsign(x131);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x132=((11.0)*sj3);
CheckValue<IkReal> x133=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x133.valid){
continue;
}
CheckValue<IkReal> x134 = IKatan2WithCheck(IkReal(((((-1.0)*px*x132))+(((3.0)*py)))),IkReal((((py*x132))+(((3.0)*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x134.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x133.value)))+(x134.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[2];
IkReal x135=IKcos(j1);
IkReal x136=IKsin(j1);
evalcond[0]=((-3.0)+((px*x135))+((py*x136)));
evalcond[1]=((((-1.0)*px*x136))+((py*x135))+(((-11.0)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
sj2=0;
cj2=1.0;
j2=0;
IkReal x137=((11.0)*cj3);
IkReal x138=(pp+(((-1.0)*(pz*pz))));
j1eval[0]=x138;
j1eval[1]=((IKabs(((((-12.0)*px))+(((-1.0)*px*x137))+(((3.0)*py)))))+(IKabs(((((12.0)*py))+((py*x137))+(((3.0)*px))))));
j1eval[2]=IKsign(x138);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
sj2=0;
cj2=1.0;
j2=0;
IkReal x139=pz*pz;
j1eval[0]=(pp+(((-1.0)*x139)));
j1eval[1]=((IKabs(((((14.0)*py))+(((72.0)*px))+((pp*py)))))+(IKabs(((((-1.0)*pp*px))+(((-14.0)*px))+(((72.0)*py))))));
j1eval[2]=IKsign(((((-24.0)*x139))+(((24.0)*pp))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x140 = IKatan2WithCheck(IkReal(((((-1.0)*pp*px))+(((-14.0)*px))+(((72.0)*py)))),IkReal(((((14.0)*py))+(((72.0)*px))+((pp*py)))),IKFAST_ATAN2_MAGTHRESH);
if(!x140.valid){
continue;
}
CheckValue<IkReal> x141=IKPowWithIntegerCheck(IKsign(((((-24.0)*(pz*pz)))+(((24.0)*pp)))),-1);
if(!x141.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x140.value)+(((1.5707963267949)*(x141.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[3];
IkReal x142=IKsin(j1);
IkReal x143=IKcos(j1);
IkReal x144=(px*x142);
IkReal x145=(py*x143);
evalcond[0]=((-3.0)+((px*x143))+((py*x142)));
evalcond[1]=((12.0)+(((11.0)*cj3))+x144+(((-1.0)*x145)));
evalcond[2]=((-14.0)+(((-1.0)*pp))+(((24.0)*x145))+(((-24.0)*x144)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x146=((11.0)*cj3);
CheckValue<IkReal> x147=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x147.valid){
continue;
}
CheckValue<IkReal> x148 = IKatan2WithCheck(IkReal(((((-12.0)*px))+(((-1.0)*px*x146))+(((3.0)*py)))),IkReal(((((12.0)*py))+(((3.0)*px))+((py*x146)))),IKFAST_ATAN2_MAGTHRESH);
if(!x148.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x147.value)))+(x148.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[3];
IkReal x149=IKsin(j1);
IkReal x150=IKcos(j1);
IkReal x151=(px*x149);
IkReal x152=(py*x150);
evalcond[0]=((-3.0)+((px*x150))+((py*x149)));
evalcond[1]=((12.0)+(((11.0)*cj3))+x151+(((-1.0)*x152)));
evalcond[2]=((-14.0)+(((-1.0)*pp))+(((24.0)*x152))+(((-24.0)*x151)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x153=((11.0)*cj3);
IkReal x154=(pp+(((-1.0)*(pz*pz))));
j1eval[0]=x154;
j1eval[1]=IKsign(x154);
j1eval[2]=((IKabs(((((-12.0)*py))+(((-1.0)*py*x153))+(((3.0)*px)))))+(IKabs(((((12.0)*px))+((px*x153))+(((3.0)*py))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x155=pz*pz;
j1eval[0]=((((-1.0)*x155))+pp);
j1eval[1]=((IKabs(((((14.0)*px))+(((72.0)*py))+((pp*px)))))+(IKabs(((((-1.0)*pp*py))+(((-14.0)*py))+(((72.0)*px))))));
j1eval[2]=IKsign(((((-24.0)*x155))+(((24.0)*pp))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x156 = IKatan2WithCheck(IkReal(((((14.0)*px))+(((72.0)*py))+((pp*px)))),IkReal(((((-1.0)*pp*py))+(((-14.0)*py))+(((72.0)*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x156.valid){
continue;
}
CheckValue<IkReal> x157=IKPowWithIntegerCheck(IKsign(((((-24.0)*(pz*pz)))+(((24.0)*pp)))),-1);
if(!x157.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x156.value)+(((1.5707963267949)*(x157.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[3];
IkReal x158=IKcos(j1);
IkReal x159=IKsin(j1);
IkReal x160=(px*x159);
IkReal x161=(py*x158);
evalcond[0]=((-3.0)+((px*x158))+((py*x159)));
evalcond[1]=((12.0)+(((11.0)*cj3))+x161+(((-1.0)*x160)));
evalcond[2]=((-14.0)+(((-1.0)*pp))+(((24.0)*x160))+(((-24.0)*x161)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x162=((11.0)*cj3);
CheckValue<IkReal> x163 = IKatan2WithCheck(IkReal(((((12.0)*px))+((px*x162))+(((3.0)*py)))),IkReal(((((-12.0)*py))+(((-1.0)*py*x162))+(((3.0)*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x163.valid){
continue;
}
CheckValue<IkReal> x164=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x164.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x163.value)+(((1.5707963267949)*(x164.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[3];
IkReal x165=IKcos(j1);
IkReal x166=IKsin(j1);
IkReal x167=(px*x166);
IkReal x168=(py*x165);
evalcond[0]=((-3.0)+((py*x166))+((px*x165)));
evalcond[1]=((12.0)+(((11.0)*cj3))+x168+(((-1.0)*x167)));
evalcond[2]=((-14.0)+(((-1.0)*pp))+(((24.0)*x167))+(((-24.0)*x168)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x169=((11.0)*px);
IkReal x170=(sj2*sj3);
IkReal x171=(cj2*cj3);
IkReal x172=((11.0)*py);
IkReal x173=((12.0)*cj2);
CheckValue<IkReal> x174=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x174.valid){
continue;
}
CheckValue<IkReal> x175 = IKatan2WithCheck(IkReal((((x169*x170))+(((-1.0)*px*x173))+(((-1.0)*x169*x171))+(((3.0)*py)))),IkReal((((py*x173))+(((-1.0)*x170*x172))+((x171*x172))+(((3.0)*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x175.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x174.value)))+(x175.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x176=IKsin(j1);
IkReal x177=IKcos(j1);
IkReal x178=((24.0)*cj2);
IkReal x179=(pz*sj2);
IkReal x180=((1.0)*cj2);
IkReal x181=((11.0)*cj3);
IkReal x182=((11.0)*sj3);
IkReal x183=(py*x177);
IkReal x184=(px*x176);
evalcond[0]=((-3.0)+((py*x176))+((px*x177)));
evalcond[1]=(((sj2*x184))+(((-1.0)*sj2*x183))+(((-1.0)*pz*x180))+(((-1.0)*x182)));
evalcond[2]=((12.0)+(((-1.0)*x180*x183))+x179+x181+((cj2*x184)));
evalcond[3]=((-14.0)+(((-1.0)*x178*x184))+((x178*x183))+(((-1.0)*pp))+(((-24.0)*x179)));
evalcond[4]=((((12.0)*cj2))+(((-1.0)*x183))+x184+((cj2*x181))+(((-1.0)*sj2*x182)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x185=((11.0)*cj3);
IkReal x186=(pz*sj2);
IkReal x187=((3.0)*cj2);
CheckValue<IkReal> x188=IKPowWithIntegerCheck(IKsign((((cj2*pp))+(((-1.0)*cj2*(pz*pz))))),-1);
if(!x188.valid){
continue;
}
CheckValue<IkReal> x189 = IKatan2WithCheck(IkReal(((((-12.0)*px))+(((-1.0)*px*x185))+((py*x187))+(((-1.0)*px*x186)))),IkReal(((((12.0)*py))+((px*x187))+((py*x186))+((py*x185)))),IKFAST_ATAN2_MAGTHRESH);
if(!x189.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x188.value)))+(x189.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x190=IKsin(j1);
IkReal x191=IKcos(j1);
IkReal x192=((24.0)*cj2);
IkReal x193=(pz*sj2);
IkReal x194=((1.0)*cj2);
IkReal x195=((11.0)*cj3);
IkReal x196=((11.0)*sj3);
IkReal x197=(py*x191);
IkReal x198=(px*x190);
evalcond[0]=((-3.0)+((px*x191))+((py*x190)));
evalcond[1]=((((-1.0)*sj2*x197))+(((-1.0)*pz*x194))+((sj2*x198))+(((-1.0)*x196)));
evalcond[2]=((12.0)+(((-1.0)*x194*x197))+x193+x195+((cj2*x198)));
evalcond[3]=((-14.0)+(((-1.0)*x192*x198))+(((-1.0)*pp))+((x192*x197))+(((-24.0)*x193)));
evalcond[4]=((((12.0)*cj2))+(((-1.0)*x197))+x198+((cj2*x195))+(((-1.0)*sj2*x196)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x199=((3.0)*sj2);
IkReal x200=(cj2*pz);
IkReal x201=((11.0)*sj3);
CheckValue<IkReal> x202=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj2*(pz*pz)))+((pp*sj2)))),-1);
if(!x202.valid){
continue;
}
CheckValue<IkReal> x203 = IKatan2WithCheck(IkReal((((px*x200))+((px*x201))+((py*x199)))),IkReal(((((-1.0)*py*x201))+((px*x199))+(((-1.0)*py*x200)))),IKFAST_ATAN2_MAGTHRESH);
if(!x203.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x202.value)))+(x203.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x204=IKsin(j1);
IkReal x205=IKcos(j1);
IkReal x206=((24.0)*cj2);
IkReal x207=(pz*sj2);
IkReal x208=((1.0)*cj2);
IkReal x209=((11.0)*cj3);
IkReal x210=((11.0)*sj3);
IkReal x211=(py*x205);
IkReal x212=(px*x204);
evalcond[0]=((-3.0)+((px*x205))+((py*x204)));
evalcond[1]=((((-1.0)*pz*x208))+((sj2*x212))+(((-1.0)*sj2*x211))+(((-1.0)*x210)));
evalcond[2]=((12.0)+((cj2*x212))+x207+x209+(((-1.0)*x208*x211)));
evalcond[3]=((-14.0)+(((-24.0)*x207))+((x206*x211))+(((-1.0)*x206*x212))+(((-1.0)*pp)));
evalcond[4]=((((12.0)*cj2))+((cj2*x209))+(((-1.0)*sj2*x210))+x212+(((-1.0)*x211)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x215 = IKatan2WithCheck(IkReal(px),IkReal(py),IKFAST_ATAN2_MAGTHRESH);
if(!x215.valid){
continue;
}
IkReal x213=((1.0)*(x215.value));
if((((px*px)+(py*py))) < -0.00001)
continue;
CheckValue<IkReal> x216=IKPowWithIntegerCheck(IKabs(IKsqrt(((px*px)+(py*py)))),-1);
if(!x216.valid){
continue;
}
if( (((3.0)*(x216.value))) < -1-IKFAST_SINCOS_THRESH || (((3.0)*(x216.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x214=IKasin(((3.0)*(x216.value)));
j1array[0]=(x214+(((-1.0)*x213)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x214))+(((-1.0)*x213)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal j2eval[3];
IkReal x217=((11.0)*sj3);
IkReal x218=(px*sj1);
IkReal x219=(cj1*py);
IkReal x220=(cj3*pz);
j2eval[0]=((((-1.0)*sj3*x218))+(((-1.09090909090909)*pz))+((sj3*x219))+(((-1.0)*x220)));
j2eval[1]=((IKabs(((-121.0)+(pz*pz)+(((121.0)*(cj3*cj3))))))+(IKabs(((((132.0)*sj3))+((pz*x218))+(((-1.0)*pz*x219))+(((121.0)*cj3*sj3))))));
j2eval[2]=IKsign(((((-11.0)*x220))+(((-12.0)*pz))+(((-1.0)*x217*x218))+((x217*x219))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
IkReal x221=(cj1*py);
IkReal x222=((11.0)*sj3);
IkReal x223=(px*sj1);
IkReal x224=((11.0)*cj3);
j2eval[0]=((-1.00378787878788)+(((-1.0)*cj3)));
j2eval[1]=((IKabs((((pz*x222))+((x223*x224))+(((-12.0)*x221))+(((-1.0)*x221*x224))+(((12.0)*x223)))))+(IKabs(((((12.0)*pz))+((pz*x224))+(((-1.0)*x222*x223))+((x221*x222))))));
j2eval[2]=IKsign(((-265.0)+(((-264.0)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
IkReal x225=(cj1*py);
IkReal x226=(pz*sj3);
IkReal x227=(px*sj1);
IkReal x228=((11.0)*cj3);
j2eval[0]=(((cj3*x225))+(((-1.09090909090909)*x227))+x226+(((-1.0)*cj3*x227))+(((1.09090909090909)*x225)));
j2eval[1]=((IKabs(((((-132.0)*sj3))+((pz*x227))+(((-121.0)*cj3*sj3))+(((-1.0)*pz*x225)))))+(IKabs(((144.0)+(((264.0)*cj3))+(((121.0)*(cj3*cj3)))+(((-1.0)*(pz*pz)))))));
j2eval[2]=IKsign((((x225*x228))+(((-1.0)*x227*x228))+(((11.0)*x226))+(((-12.0)*x227))+(((12.0)*x225))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
cj2array[0]=((((-0.0434782608695652)*px*sj1))+(((0.0434782608695652)*cj1*py)));
if( cj2array[0] >= -1-IKFAST_SINCOS_THRESH && cj2array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j2valid[0] = j2valid[1] = true;
    j2array[0] = IKacos(cj2array[0]);
    sj2array[0] = IKsin(j2array[0]);
    cj2array[1] = cj2array[0];
    j2array[1] = -j2array[0];
    sj2array[1] = -sj2array[0];
}
else if( isnan(cj2array[0]) )
{
    // probably any value will work
    j2valid[0] = true;
    cj2array[0] = 1; sj2array[0] = 0; j2array[0] = 0;
}
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x229=IKsin(j2);
IkReal x230=IKcos(j2);
IkReal x231=(px*sj1);
IkReal x232=(cj1*py*x230);
evalcond[0]=((-23.0)*x229);
evalcond[1]=(((x229*x231))+(((-1.0)*cj1*py*x229)));
evalcond[2]=((23.0)+((x230*x231))+(((-1.0)*x232)));
evalcond[3]=((-552.0)+(((24.0)*x232))+(((-24.0)*x230*x231)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j3, 6.28318530717959)))))+(IKabs(pz)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
cj2array[0]=(((cj1*py))+(((-1.0)*px*sj1)));
if( cj2array[0] >= -1-IKFAST_SINCOS_THRESH && cj2array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j2valid[0] = j2valid[1] = true;
    j2array[0] = IKacos(cj2array[0]);
    sj2array[0] = IKsin(j2array[0]);
    cj2array[1] = cj2array[0];
    j2array[1] = -j2array[0];
    sj2array[1] = -sj2array[0];
}
else if( isnan(cj2array[0]) )
{
    // probably any value will work
    j2valid[0] = true;
    cj2array[0] = 1; sj2array[0] = 0; j2array[0] = 0;
}
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x233=IKsin(j2);
IkReal x234=IKcos(j2);
IkReal x235=(px*sj1);
IkReal x236=(cj1*py*x234);
evalcond[0]=((-1.0)*x233);
evalcond[1]=((((-1.0)*cj1*py*x233))+((x233*x235)));
evalcond[2]=((1.0)+((x234*x235))+(((-1.0)*x236)));
evalcond[3]=((-24.0)+(((-24.0)*x234*x235))+(((24.0)*x236)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x237=(cj1*py);
IkReal x238=(px*sj1);
IkReal x239=((11.0)*cj3);
CheckValue<IkReal> x240 = IKatan2WithCheck(IkReal(((((-132.0)*sj3))+((pz*x238))+(((-121.0)*cj3*sj3))+(((-1.0)*pz*x237)))),IkReal(((144.0)+(((264.0)*cj3))+(((121.0)*(cj3*cj3)))+(((-1.0)*(pz*pz))))),IKFAST_ATAN2_MAGTHRESH);
if(!x240.valid){
continue;
}
CheckValue<IkReal> x241=IKPowWithIntegerCheck(IKsign(((((12.0)*x237))+((x237*x239))+(((-12.0)*x238))+(((-1.0)*x238*x239))+(((11.0)*pz*sj3)))),-1);
if(!x241.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x240.value)+(((1.5707963267949)*(x241.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x242=IKsin(j2);
IkReal x243=IKcos(j2);
IkReal x244=(cj1*py);
IkReal x245=((1.0)*pz);
IkReal x246=(px*sj1);
IkReal x247=((11.0)*cj3);
IkReal x248=((11.0)*sj3);
IkReal x249=((11.0)*x242);
IkReal x250=((24.0)*x243);
IkReal x251=(pz*x242);
evalcond[0]=((((-12.0)*x242))+(((-1.0)*x242*x247))+(((-1.0)*x243*x248))+(((-1.0)*x245)));
evalcond[1]=((((-1.0)*x243*x245))+((x242*x246))+(((-1.0)*x248))+(((-1.0)*x242*x244)));
evalcond[2]=((12.0)+x251+x247+(((-1.0)*x243*x244))+((x243*x246)));
evalcond[3]=((-14.0)+(((-1.0)*x246*x250))+(((-1.0)*pp))+(((-24.0)*x251))+((x244*x250)));
evalcond[4]=((((-1.0)*x242*x248))+(((12.0)*x243))+(((-1.0)*x244))+x246+((x243*x247)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x252=((11.0)*cj3);
IkReal x253=(px*sj1);
IkReal x254=(cj1*py);
IkReal x255=((11.0)*sj3);
CheckValue<IkReal> x256=IKPowWithIntegerCheck(IKsign(((-265.0)+(((-264.0)*cj3)))),-1);
if(!x256.valid){
continue;
}
CheckValue<IkReal> x257 = IKatan2WithCheck(IkReal(((((12.0)*pz))+((pz*x252))+((x254*x255))+(((-1.0)*x253*x255)))),IkReal(((((-1.0)*x252*x254))+((pz*x255))+((x252*x253))+(((-12.0)*x254))+(((12.0)*x253)))),IKFAST_ATAN2_MAGTHRESH);
if(!x257.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x256.value)))+(x257.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x258=IKsin(j2);
IkReal x259=IKcos(j2);
IkReal x260=(cj1*py);
IkReal x261=((1.0)*pz);
IkReal x262=(px*sj1);
IkReal x263=((11.0)*cj3);
IkReal x264=((11.0)*sj3);
IkReal x265=((11.0)*x258);
IkReal x266=((24.0)*x259);
IkReal x267=(pz*x258);
evalcond[0]=((((-1.0)*x258*x263))+(((-1.0)*x259*x264))+(((-12.0)*x258))+(((-1.0)*x261)));
evalcond[1]=((((-1.0)*x258*x260))+((x258*x262))+(((-1.0)*x259*x261))+(((-1.0)*x264)));
evalcond[2]=((12.0)+((x259*x262))+(((-1.0)*x259*x260))+x267+x263);
evalcond[3]=((-14.0)+(((-1.0)*x262*x266))+((x260*x266))+(((-24.0)*x267))+(((-1.0)*pp)));
evalcond[4]=((((-1.0)*x260))+((x259*x263))+(((-1.0)*x258*x264))+x262+(((12.0)*x259)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x268=((11.0)*sj3);
IkReal x269=(px*sj1);
IkReal x270=(cj1*py);
CheckValue<IkReal> x271=IKPowWithIntegerCheck(IKsign(((((-12.0)*pz))+(((-1.0)*x268*x269))+(((-11.0)*cj3*pz))+((x268*x270)))),-1);
if(!x271.valid){
continue;
}
CheckValue<IkReal> x272 = IKatan2WithCheck(IkReal(((-121.0)+(pz*pz)+(((121.0)*(cj3*cj3))))),IkReal(((((132.0)*sj3))+(((-1.0)*pz*x270))+((pz*x269))+(((121.0)*cj3*sj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x272.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x271.value)))+(x272.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x273=IKsin(j2);
IkReal x274=IKcos(j2);
IkReal x275=(cj1*py);
IkReal x276=((1.0)*pz);
IkReal x277=(px*sj1);
IkReal x278=((11.0)*cj3);
IkReal x279=((11.0)*sj3);
IkReal x280=((11.0)*x273);
IkReal x281=((24.0)*x274);
IkReal x282=(pz*x273);
evalcond[0]=((((-1.0)*x273*x278))+(((-12.0)*x273))+(((-1.0)*x274*x279))+(((-1.0)*x276)));
evalcond[1]=((((-1.0)*x273*x275))+((x273*x277))+(((-1.0)*x274*x276))+(((-1.0)*x279)));
evalcond[2]=((12.0)+(((-1.0)*x274*x275))+((x274*x277))+x278+x282);
evalcond[3]=((-14.0)+(((-1.0)*x277*x281))+(((-24.0)*x282))+(((-1.0)*pp))+((x275*x281)));
evalcond[4]=((((-1.0)*x273*x279))+(((12.0)*x274))+(((-1.0)*x275))+((x274*x278))+x277);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x75=(cj2*sj3);
IkReal x76=(cj1*r10);
IkReal x77=((1.0)*sj1);
IkReal x78=((1.0)*r00);
IkReal x79=(cj1*r11);
IkReal x80=(cj1*r12);
IkReal x81=((1.0)*cj1);
IkReal x82=(cj3*sj2);
IkReal x83=(r01*x77);
IkReal x84=(x75+x82);
IkReal x85=(((cj2*cj3))+(((-1.0)*sj2*sj3)));
IkReal x86=(cj1*x85);
IkReal x87=((((-1.0)*x82))+(((-1.0)*x75)));
IkReal x88=(x77*x85);
new_r00=(((r20*x85))+((x76*x84))+(((-1.0)*r00*x77*x84)));
new_r01=(((x79*x84))+((r21*x85))+(((-1.0)*x83*x84)));
new_r02=((((-1.0)*r02*x77*x84))+((x80*x84))+((r22*x85)));
new_r10=(((r20*x87))+((x76*x85))+(((-1.0)*r00*x88)));
new_r11=(((x79*x85))+((r21*x87))+(((-1.0)*x83*x85)));
new_r12=((((-1.0)*r02*x88))+((x80*x85))+((r22*x87)));
new_r20=((((-1.0)*r10*x77))+(((-1.0)*cj1*x78)));
new_r21=((((-1.0)*r11*x77))+(((-1.0)*r01*x81)));
new_r22=((((-1.0)*r02*x81))+(((-1.0)*r12*x77)));
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((-1.0)*new_r02)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r02))+IKsqr(new_r12)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*new_r02), new_r12);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x89=IKcos(j4);
IkReal x90=IKsin(j4);
IkReal x91=((1.0)*x90);
evalcond[0]=(x90+new_r02);
evalcond[1]=((((-1.0)*x89))+new_r12);
evalcond[2]=(((new_r02*x89))+((new_r12*x90)));
evalcond[3]=((((-1.0)*new_r00*x91))+((new_r10*x89)));
evalcond[4]=((((-1.0)*new_r01*x91))+((new_r11*x89)));
evalcond[5]=((-1.0)+((new_r12*x89))+(((-1.0)*new_r02*x91)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
j5eval[0]=((IKabs((((new_r12*sj4))+((cj4*new_r02)))))+(IKabs(new_r22)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
j5eval[0]=((IKabs(new_r22))+(IKabs(((((-1.0)*cj4*new_r02))+(((-1.0)*new_r12*sj4))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j5, j7]

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x93 = IKatan2WithCheck(IkReal(((-1.0)*new_r22)),IkReal(((((-1.0)*cj4*new_r02))+(((-1.0)*new_r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x93.valid){
continue;
}
IkReal x92=x93.value;
j5array[0]=((-1.0)*x92);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x92)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((((((new_r12*sj4))+((cj4*new_r02))))*(IKcos(j5))))+(((-1.0)*new_r22*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x94=((1.0)*cj5);
if( IKabs((((new_r21*sj5))+(((-1.0)*new_r20*x94)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r20*sj5))+(((-1.0)*new_r21*x94)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r21*sj5))+(((-1.0)*new_r20*x94))))+IKsqr(((((-1.0)*new_r20*sj5))+(((-1.0)*new_r21*x94))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((((new_r21*sj5))+(((-1.0)*new_r20*x94))), ((((-1.0)*new_r20*sj5))+(((-1.0)*new_r21*x94))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[12];
IkReal x95=IKcos(j7);
IkReal x96=IKsin(j7);
IkReal x97=((1.0)*cj5);
IkReal x98=(cj4*sj5);
IkReal x99=(cj4*new_r01);
IkReal x100=((1.0)*sj5);
IkReal x101=(new_r10*sj4);
IkReal x102=(cj4*cj5);
IkReal x103=(new_r11*sj4);
IkReal x104=(cj5*x96);
IkReal x105=(sj5*x95);
IkReal x106=((1.0)*x95);
IkReal x107=(sj4*x95);
IkReal x108=(sj4*x96);
IkReal x109=(cj5*x95);
IkReal x110=(x104+x105);
evalcond[0]=(x110+new_r20);
evalcond[1]=(x109+(((-1.0)*x100*x96))+new_r21);
evalcond[2]=(((x102*x96))+((x95*x98))+new_r01);
evalcond[3]=(((sj4*x105))+((sj4*x104))+new_r11);
evalcond[4]=(((x96*x98))+new_r00+(((-1.0)*cj4*x95*x97)));
evalcond[5]=((((-1.0)*x107*x97))+((sj5*x108))+new_r10);
evalcond[6]=((((-1.0)*new_r21*x100))+x96+((cj5*x99))+((cj5*x103)));
evalcond[7]=(x110+x103+x99);
evalcond[8]=((((-1.0)*x95*x97))+((cj4*new_r00))+x101+((sj5*x96)));
evalcond[9]=((((-1.0)*x106))+((new_r00*x102))+(((-1.0)*new_r20*x100))+((cj5*x101)));
evalcond[10]=((((-1.0)*x100*x101))+(((-1.0)*new_r00*x98))+(((-1.0)*x96))+(((-1.0)*new_r20*x97)));
evalcond[11]=((((-1.0)*x100*x103))+(((-1.0)*x106))+(((-1.0)*new_r21*x97))+(((-1.0)*new_r01*x98)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x112 = IKatan2WithCheck(IkReal((((new_r12*sj4))+((cj4*new_r02)))),IkReal(((-1.0)*new_r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x112.valid){
continue;
}
IkReal x111=x112.value;
j5array[0]=((-1.0)*x111);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x111)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=((((((((-1.0)*cj4*new_r02))+(((-1.0)*new_r12*sj4))))*(IKsin(j5))))+(((-1.0)*new_r22*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x113=((1.0)*cj5);
if( IKabs(((((-1.0)*new_r20*x113))+((new_r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r20*sj5))+(((-1.0)*new_r21*x113)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r20*x113))+((new_r21*sj5))))+IKsqr(((((-1.0)*new_r20*sj5))+(((-1.0)*new_r21*x113))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-1.0)*new_r20*x113))+((new_r21*sj5))), ((((-1.0)*new_r20*sj5))+(((-1.0)*new_r21*x113))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[12];
IkReal x114=IKcos(j7);
IkReal x115=IKsin(j7);
IkReal x116=((1.0)*cj5);
IkReal x117=(cj4*sj5);
IkReal x118=(cj4*new_r01);
IkReal x119=((1.0)*sj5);
IkReal x120=(new_r10*sj4);
IkReal x121=(cj4*cj5);
IkReal x122=(new_r11*sj4);
IkReal x123=(cj5*x115);
IkReal x124=(sj5*x114);
IkReal x125=((1.0)*x114);
IkReal x126=(sj4*x114);
IkReal x127=(sj4*x115);
IkReal x128=(cj5*x114);
IkReal x129=(x124+x123);
evalcond[0]=(x129+new_r20);
evalcond[1]=((((-1.0)*x115*x119))+x128+new_r21);
evalcond[2]=(((x114*x117))+((x115*x121))+new_r01);
evalcond[3]=(((sj4*x124))+((sj4*x123))+new_r11);
evalcond[4]=((((-1.0)*cj4*x114*x116))+new_r00+((x115*x117)));
evalcond[5]=(((sj5*x127))+(((-1.0)*x116*x126))+new_r10);
evalcond[6]=(x115+(((-1.0)*new_r21*x119))+((cj5*x118))+((cj5*x122)));
evalcond[7]=(x122+x129+x118);
evalcond[8]=(((cj4*new_r00))+((sj5*x115))+x120+(((-1.0)*x114*x116)));
evalcond[9]=(((new_r00*x121))+(((-1.0)*new_r20*x119))+(((-1.0)*x125))+((cj5*x120)));
evalcond[10]=((((-1.0)*x119*x120))+(((-1.0)*new_r20*x116))+(((-1.0)*new_r00*x117))+(((-1.0)*x115)));
evalcond[11]=((((-1.0)*x119*x122))+(((-1.0)*x125))+(((-1.0)*new_r21*x116))+(((-1.0)*new_r01*x117)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - ArmBot (a08bb74b72d73745b837e604e0204bde)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
